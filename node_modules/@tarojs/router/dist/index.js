'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var history = require('history');
var UniversalRouter = _interopDefault(require('universal-router'));
var runtime = require('@tarojs/runtime');

exports.history = history.createBrowserHistory();

var stacks = [];

// TODO: 传递 success, fail, complete
function navigateTo(option) {
    var url = option.url;
    exports.history.push(url);
}
function redirectTo(option) {
    var url = option.url;
    exports.history.replace(url);
}
function navigateBack(_) {
    exports.history.goBack();
}
function switchTab(option) {
    navigateTo(option);
}
function reLaunch(option) {
    redirectTo(option);
}
function getCurrentPages() {
    return stacks;
}

var qs = function () {
    var params = {};
    location.search.substr(1).split('&').forEach(function (pair) {
        var ref = pair.split('=');
        var key = ref[0];
        var value = ref[1];
        params[key] = value;
    });
    return params;
};

function initTabbar(config) {
    if (config.tabBar == null) {
        return;
    }
    // TODO: 找到 tabbar 的类型
    var tabbar = document.createElement('taro-tabbar');
    tabbar.conf = config.tabBar;
    var container = document.getElementById('container');
    // eslint-disable-next-line no-unused-expressions
    container === null || container === void 0 ? void 0 : container.appendChild(tabbar);
}

function init(config) {
    var _a;
    // eslint-disable-next-line no-unused-expressions
    (_a = document.getElementById('app')) === null || _a === void 0 ? void 0 : _a.remove();
    var container = document.createElement('div');
    container.classList.add('taro-tabbar__container');
    container.id = 'container';
    var panel = document.createElement('div');
    panel.classList.add('taro-tabbar__panel');
    var app = document.createElement('div');
    app.id = 'app';
    app.classList.add('taro_router');
    panel.appendChild(app);
    container.appendChild(panel);
    document.body.appendChild(container);
    initTabbar(config);
}

function addLeadingSlash(path) {
    if (path == null) {
        return '';
    }
    return path.charAt(0) === '/' ? path : '/' + path;
}
function hidePage(page) {
    if (page != null) {
        page.onHide();
        var pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'none';
        }
    }
}
function showPage(page) {
    if (page != null) {
        page.onShow();
        stacks.push(page);
        var pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'block';
        }
        else {
            page.onLoad(qs());
        }
    }
}
function unloadPage(page) {
    if (page != null) {
        page.onHide();
        stacks.pop();
        page.onUnload();
    }
}
function loadPage(page) {
    if (page !== null) {
        var pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'block';
        }
        else {
            page.onLoad(qs());
        }
        page.onShow();
        stacks.push(page);
    }
}
function createRouter(App, config, framework) {
    init(config);
    var routes = [];
    for (var i = 0; i < config.routes.length; i++) {
        var route = config.routes[i];
        routes.push({
            path: addLeadingSlash(route.path),
            action: route.load
        });
    }
    var router = new UniversalRouter(routes);
    var app = framework === 'react' ? runtime.createReactApp(App) : runtime.createVueApp(App);
    app.onLaunch();
    var render = async function (location, action) {
        var _a, _b;
        var element = await router.resolve(location.pathname);
        var pageConfig = config.routes.find(function (r) { return addLeadingSlash(r.path) === location.pathname; });
        runtime.eventCenter.trigger('__taroRouterChange', {
            toLocation: {
                path: location.pathname
            }
        });
        if (pageConfig) {
            document.title = (_a = pageConfig.navigationBarTitleText) !== null && _a !== void 0 ? _a : document.title;
        }
        var shouldLoad = false;
        if (action === 'POP') {
            unloadPage(runtime.Current.page);
            var prev = stacks.find(function (s) { return s.path === location.pathname; });
            if (prev) {
                showPage(prev);
            }
            else {
                shouldLoad = true;
            }
        }
        else if (action === 'PUSH') {
            hidePage(runtime.Current.page);
            shouldLoad = true;
        }
        else if (action === 'REPLACE') {
            unloadPage(runtime.Current.page);
            shouldLoad = true;
        }
        if (shouldLoad) {
            var page = runtime.createPageConfig((_b = element.default) !== null && _b !== void 0 ? _b : element, location.pathname);
            loadPage(page);
        }
    };
    if (exports.history.location.pathname === '/') {
        exports.history.replace(config.pages[0]);
    }
    render(exports.history.location, 'PUSH');
    app.onShow(qs());
    return exports.history.listen(render);
}

exports.createRouter = createRouter;
exports.getCurrentPages = getCurrentPages;
exports.navigateBack = navigateBack;
exports.navigateTo = navigateTo;
exports.reLaunch = reLaunch;
exports.redirectTo = redirectTo;
exports.switchTab = switchTab;
//# sourceMappingURL=index.js.map
