import { createBrowserHistory } from 'history';
import UniversalRouter from 'universal-router';
import { createReactApp, createVueApp, eventCenter, Current, createPageConfig } from '@tarojs/runtime';

let history = createBrowserHistory();

const stacks = [];

// TODO: 传递 success, fail, complete
function navigateTo(option) {
    const { url } = option;
    history.push(url);
}
function redirectTo(option) {
    const { url } = option;
    history.replace(url);
}
function navigateBack(_) {
    history.goBack();
}
function switchTab(option) {
    navigateTo(option);
}
function reLaunch(option) {
    redirectTo(option);
}
function getCurrentPages() {
    return stacks;
}

const qs = function () {
    const params = {};
    location.search.substr(1).split('&').forEach(pair => {
        const [key, value] = pair.split('=');
        params[key] = value;
    });
    return params;
};

function initTabbar(config) {
    if (config.tabBar == null) {
        return;
    }
    // TODO: 找到 tabbar 的类型
    const tabbar = document.createElement('taro-tabbar');
    tabbar.conf = config.tabBar;
    const container = document.getElementById('container');
    // eslint-disable-next-line no-unused-expressions
    container === null || container === void 0 ? void 0 : container.appendChild(tabbar);
}

function init(config) {
    var _a;
    // eslint-disable-next-line no-unused-expressions
    (_a = document.getElementById('app')) === null || _a === void 0 ? void 0 : _a.remove();
    const container = document.createElement('div');
    container.classList.add('taro-tabbar__container');
    container.id = 'container';
    const panel = document.createElement('div');
    panel.classList.add('taro-tabbar__panel');
    const app = document.createElement('div');
    app.id = 'app';
    app.classList.add('taro_router');
    panel.appendChild(app);
    container.appendChild(panel);
    document.body.appendChild(container);
    initTabbar(config);
}

function addLeadingSlash(path) {
    if (path == null) {
        return '';
    }
    return path.charAt(0) === '/' ? path : '/' + path;
}
function hidePage(page) {
    if (page != null) {
        page.onHide();
        const pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'none';
        }
    }
}
function showPage(page) {
    if (page != null) {
        page.onShow();
        stacks.push(page);
        const pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'block';
        }
        else {
            page.onLoad(qs());
        }
    }
}
function unloadPage(page) {
    if (page != null) {
        page.onHide();
        stacks.pop();
        page.onUnload();
    }
}
function loadPage(page) {
    if (page !== null) {
        const pageEl = document.getElementById(page.path);
        if (pageEl) {
            pageEl.style.display = 'block';
        }
        else {
            page.onLoad(qs());
        }
        page.onShow();
        stacks.push(page);
    }
}
function createRouter(App, config, framework) {
    init(config);
    const routes = [];
    for (let i = 0; i < config.routes.length; i++) {
        const route = config.routes[i];
        routes.push({
            path: addLeadingSlash(route.path),
            action: route.load
        });
    }
    const router = new UniversalRouter(routes);
    const app = framework === 'react' ? createReactApp(App) : createVueApp(App);
    app.onLaunch();
    const render = async (location, action) => {
        var _a, _b;
        const element = await router.resolve(location.pathname);
        const pageConfig = config.routes.find(r => addLeadingSlash(r.path) === location.pathname);
        eventCenter.trigger('__taroRouterChange', {
            toLocation: {
                path: location.pathname
            }
        });
        if (pageConfig) {
            document.title = (_a = pageConfig.navigationBarTitleText) !== null && _a !== void 0 ? _a : document.title;
        }
        let shouldLoad = false;
        if (action === 'POP') {
            unloadPage(Current.page);
            const prev = stacks.find(s => s.path === location.pathname);
            if (prev) {
                showPage(prev);
            }
            else {
                shouldLoad = true;
            }
        }
        else if (action === 'PUSH') {
            hidePage(Current.page);
            shouldLoad = true;
        }
        else if (action === 'REPLACE') {
            unloadPage(Current.page);
            shouldLoad = true;
        }
        if (shouldLoad) {
            const page = createPageConfig((_b = element.default) !== null && _b !== void 0 ? _b : element, location.pathname);
            loadPage(page);
        }
    };
    if (history.location.pathname === '/') {
        history.replace(config.pages[0]);
    }
    render(history.location, 'PUSH');
    app.onShow(qs());
    return history.listen(render);
}

export { createRouter, getCurrentPages, history, navigateBack, navigateTo, reLaunch, redirectTo, switchTab };
//# sourceMappingURL=router.esm.js.map
