'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function isString(o) {
    return typeof o === 'string';
}
function isUndefined(o) {
    return typeof o === 'undefined';
}
function isObject(o) {
    return o !== null && typeof o === 'object';
}
function isFunction(o) {
    return typeof o === 'function';
}
var isArray = Array.isArray;

var EMPTY_OBJ = {};
var noop = function () {
    var _ = [], len = arguments.length;
    while ( len-- ) _[ len ] = arguments[ len ];
 };
function toDashed(s) {
    return s.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}
function toCamelCase(s) {
    var camel = '';
    var nextCap = false;
    for (var i = 0; i < s.length; i++) {
        if (s[i] !== '-') {
            camel += nextCap ? s[i].toUpperCase() : s[i];
            nextCap = false;
        }
        else {
            nextCap = true;
        }
    }
    return camel;
}
var reportIssue = '如有疑问，请提交 issue 至：https://github.com/nervjs/taro/issues';
/**
 * ensure takes a condition and throw a error if the condition fails,
 * like failure::ensure: https://docs.rs/failure/0.1.1/failure/macro.ensure.html
 * @param condition condition.
 * @param msg error message.
 */
function ensure(condition, msg) {
    if (condition) {
        return;
    }
    throw new Error(msg + '\n' + reportIssue);
}
function warn(condition, msg) {
    if (process.env.NODE_ENV !== 'production') {
        if (condition) {
            console.error(msg);
        }
    }
}
var touchEvents = {
    bindTouchStart: '',
    bindTouchMove: '',
    bindTouchEnd: '',
    bindTouchCancel: '',
    bindLongTap: ''
};
var View = Object.assign({ 'hover-class': singleQuote('none'), 'hover-stop-propagation': 'false', 'hover-start-time': '50', 'hover-stay-time': '400', animation: '' }, touchEvents);
var CoverView = Object.assign({ 'scroll-top': 'false' }, touchEvents);
var MovableView = Object.assign({ direction: 'none', inertia: 'false', 'out-of-bounds': 'false', x: '', y: '', damping: '20', friction: '2', disabled: '', scale: 'false', 'scale-min': '0.5', 'scale-max': '10', 'scale-value': '1', animation: 'true', bindChange: '', bindScale: '', htouchmove: '', vtouchmove: '', width: singleQuote('10px'), height: singleQuote('10px') }, touchEvents);
var ScrollView = Object.assign({ 'scroll-x': 'false', 'scroll-y': 'false', 'upper-threshold': '50', 'lower-threshold': '50', 'scroll-top': '', 'scroll-left': '', 'scroll-into-view': '', 'scroll-with-animation': 'false', 'enable-back-to-top': 'false', 'enable-flex': 'false', 'scroll-anchoring': ' false', bindScrolltoUpper: '', bindScrolltoLower: '', bindScroll: '' }, touchEvents);
function singleQuote(s) {
    return ("'" + s + "'");
}
var controlledComponent = new Set([
    'input',
    'checkbox',
    'picker-view',
    'radio',
    'slider',
    'textarea'
]);

var incrementId = function () {
    var id = 0;
    return function () { return (id++).toString(); };
};
function isElement(node) {
    return node.nodeType === 1 /* ELEMENT_NODE */;
}
function isText(node) {
    return node.nodeType === 3 /* TEXT_NODE */;
}

var TaroEventTarget = function TaroEventTarget() {
    this.__handlers = {};
};
TaroEventTarget.prototype.addEventListener = function addEventListener (type, handler, options) {
    type = type.toLowerCase();
    var handlers = this.__handlers[type];
    var isCapture = Boolean(options);
    var isOnce = false;
    if (isObject(options)) {
        isCapture = Boolean(options.capture);
        isOnce = Boolean(options.once);
    }
    if (isOnce) {
        var wrapper = function () {
            handler.apply(this, arguments); // this 指向 Element
            this.removeEventListener(type, wrapper);
        };
        this.addEventListener(type, wrapper, Object.assign(Object.assign({}, options), { once: false }));
        return;
    }
    warn(isCapture, 'The event capture feature is unimplemented.');
    if (isArray(handlers)) {
        handlers.push(handler);
    }
    else {
        this.__handlers[type] = [handler];
    }
};
TaroEventTarget.prototype.removeEventListener = function removeEventListener (type, handler) {
    type = type.toLowerCase();
    if (handler == null) {
        return;
    }
    var handlers = this.__handlers[type];
    if (!isArray(handlers)) {
        return;
    }
    var index = handlers.indexOf(handler);
    warn(index === -1, ("事件: '" + type + "' 没有注册在 DOM 中，因此不会被移除。"));
    handlers.splice(index, 1);
};

var eventSource = new Map();
var TaroEvent = function TaroEvent(type, opts, event) {
    this._stop = false;
    this._end = false;
    this.defaultPrevented = false;
    this.type = type.toLowerCase();
    this.mpEvent = event;
    this.bubbles = Boolean(opts && opts.bubbles);
    this.cancelable = Boolean(opts && opts.cancelable);
};

var prototypeAccessors = { target: { configurable: true },currentTarget: { configurable: true } };
TaroEvent.prototype.stopPropagation = function stopPropagation () {
    this._stop = true;
};
TaroEvent.prototype.stopImmediatePropagation = function stopImmediatePropagation () {
    this._end = this._stop = true;
};
TaroEvent.prototype.preventDefault = function preventDefault () {
    this.defaultPrevented = true;
};
prototypeAccessors.target.get = function () {
    var element = document$1.getElementById(this.mpEvent.target.id);
    return Object.assign(Object.assign(Object.assign({}, this.mpEvent.target), this.mpEvent.detail), { dataset: element !== null ? element.dataset : EMPTY_OBJ });
};
prototypeAccessors.currentTarget.get = function () {
    var element = document$1.getElementById(this.mpEvent.target.id);
    if (element === null) {
        return this.target;
    }
    return Object.assign(Object.assign(Object.assign({}, this.mpEvent.currentTarget), this.mpEvent.detail), { dataset: element.dataset });
};

Object.defineProperties( TaroEvent.prototype, prototypeAccessors );
function createEvent(event, _) {
    var domEv = new TaroEvent(event.type, { bubbles: true, cancelable: true }, event);
    for (var key in event) {
        if (key === 'currentTarget' || key === 'target' || key === 'type') {
            continue;
        }
        else {
            domEv[key] = event[key];
        }
    }
    return domEv;
}
function eventHandler(event) {
    if (event.currentTarget == null) {
        event.currentTarget = event.target;
    }
    var node = document$1.getElementById(event.currentTarget.id);
    if (node != null) {
        node.dispatchEvent(createEvent(event));
    }
}

/**
 * React also has a fancy function's name for this: `hydrate()`.
 * You may have been heard `hydrate` as a SSR-related function,
 * actually, `hydrate` basicly do the `render()` thing, but ignore some properties,
 * it's a vnode traverser and modifier: that's exactly what Taro's doing in here.
 */
function hydrate(node) {
    var obj;

    if (isText(node)) {
        return ( obj = {}, obj["v" /* Text */] = node.nodeValue, obj["nn" /* NodeName */] = node.nodeName, obj );
    }
    var data = {};
    data["nn" /* NodeName */] = node.nodeName;
    data.uid = node.uid;
    var props = node.props;
    var childNodes = node.childNodes;
    for (var prop in props) {
        if (!prop.startsWith('data-') && // 在 node.dataset 的数据
            prop !== 'class' &&
            prop !== 'style' &&
            prop !== 'id') {
            data[process.env.FRAMEWORK === 'vue' ? toCamelCase(prop) : prop] = props[prop];
        }
    }
    if (childNodes.length > 0) {
        data["cn" /* Childnodes */] = childNodes.map(hydrate);
    }
    if (node.className !== '') {
        data["cl" /* Class */] = node.className;
    }
    if (node.cssText !== '') {
        data["st" /* Style */] = node.cssText;
    }
    return data;
}

var nodeId = incrementId();
var TaroNode = /*@__PURE__*/(function (TaroEventTarget) {
    function TaroNode(nodeType, nodeName) {
        TaroEventTarget.call(this);
        this.parentNode = null;
        this.childNodes = [];
        this.hydrate = function (node) { return function () { return hydrate(node); }; };
        this.nodeType = nodeType;
        this.nodeName = nodeName;
        this.uid = "_n_" + (nodeId());
        eventSource.set(this.uid, this);
    }

    if ( TaroEventTarget ) TaroNode.__proto__ = TaroEventTarget;
    TaroNode.prototype = Object.create( TaroEventTarget && TaroEventTarget.prototype );
    TaroNode.prototype.constructor = TaroNode;

    var prototypeAccessors = { _path: { configurable: true },_root: { configurable: true },nextSibling: { configurable: true },previousSibling: { configurable: true },firstChild: { configurable: true },lastChild: { configurable: true },textContent: { configurable: true } };
    prototypeAccessors._path.get = function () {
        if (this.parentNode !== null) {
            var index = process.env.TARO_ENV === 'swan'
                ? this.parentNode.childNodes.indexOf(this)
                : '[' + this.parentNode.childNodes.indexOf(this) + ']';
            return ((this.parentNode._path) + "." + ("cn") + "." + index);
        }
        return '';
    };
    prototypeAccessors._root.get = function () {
        if (this.parentNode !== null) {
            return this.parentNode._root;
        }
        return null;
    };
    prototypeAccessors.nextSibling.get = function () {
        var parentNode = this.parentNode;
        if (parentNode) {
            return parentNode.childNodes[this.findIndex(parentNode.childNodes, this) + 1] || null;
        }
        return null;
    };
    prototypeAccessors.previousSibling.get = function () {
        var parentNode = this.parentNode;
        if (parentNode) {
            return parentNode.childNodes[this.findIndex(parentNode.childNodes, this) - 1] || null;
        }
        return null;
    };
    TaroNode.prototype.insertBefore = function insertBefore (newChild, refChild, isReplace) {
        var this$1 = this;

        newChild.remove();
        newChild.parentNode = this;
        var payload;
        if (refChild) {
            var index = this.findIndex(this.childNodes, refChild);
            this.childNodes.splice(index, 0, newChild);
            if (isReplace === true) {
                payload = {
                    path: newChild._path,
                    value: this.hydrate(newChild)
                };
            }
            else {
                payload = {
                    path: ((this._path) + "." + ("cn")),
                    value: function () { return this$1.childNodes.map(hydrate); }
                };
            }
        }
        else {
            this.childNodes.push(newChild);
            payload = {
                path: newChild._path,
                value: this.hydrate(newChild)
            };
        }
        this.enqueueUpdate(payload);
        return newChild;
    };
    TaroNode.prototype.appendChild = function appendChild (child) {
        this.insertBefore(child);
    };
    TaroNode.prototype.replaceChild = function replaceChild (newChild, oldChild) {
        if (oldChild.parentNode === this) {
            this.insertBefore(newChild, oldChild, true);
            oldChild.remove(true);
            return oldChild;
        }
    };
    TaroNode.prototype.removeChild = function removeChild (child, isReplace) {
        var this$1 = this;

        var index = this.findIndex(this.childNodes, child);
        this.childNodes.splice(index, 1);
        if (isReplace !== true) {
            this.enqueueUpdate({
                path: ((this._path) + "." + ("cn")),
                value: function () { return this$1.childNodes.map(hydrate); }
            });
        }
        child.parentNode = null;
        eventSource.delete(child.uid);
        return child;
    };
    TaroNode.prototype.remove = function remove (isReplace) {
        if (this.parentNode) {
            this.parentNode.removeChild(this, isReplace);
        }
    };
    prototypeAccessors.firstChild.get = function () {
        return this.childNodes[0] || null;
    };
    prototypeAccessors.lastChild.get = function () {
        var c = this.childNodes;
        return c[c.length - 1] || null;
    };
    TaroNode.prototype.hasChildNodes = function hasChildNodes () {
        return this.childNodes.length > 0;
    };
    TaroNode.prototype.enqueueUpdate = function enqueueUpdate (payload) {
        if (this._root === null) {
            return;
        }
        this._root.enqueueUpdate(payload);
    };
    /**
     * @textContent 目前只能置空子元素
     * @TODO 等待完整 innerHTML 实现
     */
    prototypeAccessors.textContent.set = function (text) {
        if (text === '') {
            while (this.childNodes.length > 0) {
                this.childNodes[0].remove();
            }
        }
    };
    TaroNode.prototype.findIndex = function findIndex (childeNodes, refChild) {
        var index = childeNodes.indexOf(refChild);
        ensure(index !== -1, 'The node to be replaced is not a child of this node.');
        return index;
    };

    Object.defineProperties( TaroNode.prototype, prototypeAccessors );

    return TaroNode;
}(TaroEventTarget));

var TaroText = /*@__PURE__*/(function (TaroNode) {
    function TaroText(text) {
        TaroNode.call(this, 3 /* TEXT_NODE */, '#text');
        this._value = text;
    }

    if ( TaroNode ) TaroText.__proto__ = TaroNode;
    TaroText.prototype = Object.create( TaroNode && TaroNode.prototype );
    TaroText.prototype.constructor = TaroText;

    var prototypeAccessors = { textContent: { configurable: true },nodeValue: { configurable: true } };
    prototypeAccessors.textContent.set = function (text) {
        this._value = text;
        this.enqueueUpdate({
            path: ((this._path) + "." + ("v")),
            value: text
        });
    };
    prototypeAccessors.textContent.get = function () {
        return this._value;
    };
    prototypeAccessors.nodeValue.set = function (text) {
        this.textContent = text;
    };
    prototypeAccessors.nodeValue.get = function () {
        return this._value;
    };

    Object.defineProperties( TaroText.prototype, prototypeAccessors );

    return TaroText;
}(TaroNode));

/*
 *
 * https://www.w3.org/Style/CSS/all-properties.en.html
 */
var styleProperties = [
    'alignContent',
    'alignItems',
    'alignSelf',
    'alignmentAdjust',
    'alignmentBaseline',
    'all',
    'animation',
    'animationDelay',
    'animationDirection',
    'animationDuration',
    'animationFillMode',
    'animationIterationCount',
    'animationName',
    'animationPlayState',
    'animationTimingFunction',
    'appearance',
    'azimuth',
    'backfaceVisibility',
    'background',
    'backgroundAttachment',
    'backgroundBlendMode',
    'backgroundClip',
    'backgroundColor',
    'backgroundImage',
    'backgroundOrigin',
    'backgroundPosition',
    'backgroundRepeat',
    'backgroundSize',
    'baselineShift',
    'blockOverflow',
    'blockSize',
    'bookmarkLabel',
    'bookmarkLevel',
    'bookmarkState',
    'border',
    'borderBlock',
    'borderBlockColor',
    'borderBlockEnd',
    'borderBlockEndColor',
    'borderBlockEndStyle',
    'borderBlockEndWidth',
    'borderBlockStart',
    'borderBlockStartColor',
    'borderBlockStartStyle',
    'borderBlockStartWidth',
    'borderBlockStyle',
    'borderBlockWidth',
    'borderBottom',
    'borderBottomColor',
    'borderBottomFitLength',
    'borderBottomFitWidth',
    'borderBottomImage',
    'borderBottomLeftFitWidth',
    'borderBottomLeftImage',
    'borderBottomLeftRadius',
    'borderBottomRightFitLength',
    'borderBottomRightFitWidth',
    'borderBottomRightImage',
    'borderBottomRightRadius',
    'borderBottomStyle',
    'borderBottomWidth',
    'borderBottomlEftFitLength',
    'borderBoundary',
    'borderBreak',
    'borderCollapse',
    'borderColor',
    'borderCornerFit',
    'borderCornerImage',
    'borderCornerImageTransform',
    'borderEndEndRadius',
    'borderEndStartRadius',
    'borderFit',
    'borderFitLength',
    'borderFitWidth',
    'borderImage',
    'borderImageOutset',
    'borderImageRepeat',
    'borderImageSlice',
    'borderImageSource',
    'borderImageTransform',
    'borderImageWidth',
    'borderInline',
    'borderInlineColor',
    'borderInlineEnd',
    'borderInlineEndColor',
    'borderInlineEndStyle',
    'borderInlineEndWidth',
    'borderInlineStart',
    'borderInlineStartColor',
    'borderInlineStartStyle',
    'borderInlineStartWidth',
    'borderInlineStyle',
    'borderInlineWidth',
    'borderLeft',
    'borderLeftColor',
    'borderLeftFitLength',
    'borderLeftFitWidth',
    'borderLeftImage',
    'borderLeftStyle',
    'borderLeftWidth',
    'borderRadius',
    'borderRight',
    'borderRightColor',
    'borderRightFitLength',
    'borderRightFitWidth',
    'borderRightImage',
    'borderRightStyle',
    'borderRightWidth',
    'borderSpacing',
    'borderStartEndRadius',
    'borderStartStartRadius',
    'borderStyle',
    'borderTop',
    'borderTopColor',
    'borderTopFitLength',
    'borderTopFitWidth',
    'borderTopImage',
    'borderTopLeftFitLength',
    'borderTopLeftFitWidth',
    'borderTopLeftImage',
    'borderTopLeftRadius',
    'borderTopRightFitLength',
    'borderTopRightFitWidth',
    'borderTopRightImage',
    'borderTopRightRadius',
    'borderTopStyle',
    'borderTopWidth',
    'borderWidth',
    'bottom',
    'boxDecorationBreak',
    'boxShadow',
    'boxSizing',
    'boxSnap',
    'breakAfter',
    'breakBefore',
    'breakInside',
    'captionSide',
    'caret',
    'caretColor',
    'caretShape',
    'chains',
    'clear',
    'clip',
    'clipPath',
    'clipRule',
    'color',
    'colorAdjust',
    'colorInterpolationFilters',
    'colorScheme',
    'columnCount',
    'columnFill',
    'columnGap',
    'columnRule',
    'columnRuleColor',
    'columnRuleStyle',
    'columnRuleWidth',
    'columnSpan',
    'columnWidth',
    'columns',
    'contain',
    'content',
    'continue',
    'counterIncrement',
    'counterReset',
    'counterSet',
    'cue',
    'cueAfter',
    'cueBefore',
    'cursor',
    'direction',
    'display',
    'dominantBaseline',
    'dropInitialAfterAdjust',
    'dropInitialAfterAlign',
    'dropInitialBeforeAdjust',
    'dropInitialBeforeAlign',
    'dropInitialSize',
    'dropInitialValue',
    'elevation',
    'emptyCells',
    'filter',
    'flex',
    'flexBasis',
    'flexDirection',
    'flexFlow',
    'flexGrow',
    'flexShrink',
    'flexWrap',
    'float',
    'floodColor',
    'floodOpacity',
    'flow',
    'flowFrom',
    'flowInto',
    'font',
    'fontFamily',
    'fontFeatureSettings',
    'fontKerning',
    'fontLanguageOverride',
    'fontMaxSize',
    'fontMinSize',
    'fontOpticalSizing',
    'fontPalette',
    'fontSize',
    'fontSizeAdjust',
    'fontStretch',
    'fontStyle',
    'fontSynthesis',
    'fontSynthesisSmallCaps',
    'fontSynthesisStyle',
    'fontSynthesisWeight',
    'fontVariant',
    'fontVariantAlternates',
    'fontVariantCaps',
    'fontVariantEastAsian',
    'fontVariantEmoji',
    'fontVariantLigatures',
    'fontVariantNumeric',
    'fontVariantPosition',
    'fontVariationSettings',
    'fontWeight',
    'footnoteDisplay',
    'footnotePolicy',
    'forcedColorAdjust',
    'gap',
    'glyphOrientationVertical',
    'grid',
    'gridArea',
    'gridAutoColumns',
    'gridAutoFlow',
    'gridAutoRows',
    'gridColumn',
    'gridColumnEnd',
    'gridColumnStart',
    'gridRow',
    'gridRowEnd',
    'gridRowStart',
    'gridTemplate',
    'gridTemplateAreas',
    'gridTemplateColumns',
    'gridTemplateRows',
    'hangingPunctuation',
    'height',
    'hyphenateCharacter',
    'hyphenateLimitChars',
    'hyphenateLimitLast',
    'hyphenateLimitLines',
    'hyphenateLimitZone',
    'hyphens',
    'imageOrientation',
    'imageResolution',
    'initialLetters',
    'initialLettersAlign',
    'initialLettersWrap',
    'inlineBoxAlign',
    'inlineSize',
    'inlineSizing',
    'inset',
    'insetBlock',
    'insetBlockEnd',
    'insetBlockStart',
    'insetInline',
    'insetInlineEnd',
    'insetInlineStart',
    'isolation',
    'justifyContent',
    'justifyItems',
    'justifySelf',
    'left',
    'letterSpacing',
    'lightingColor',
    'lineBreak',
    'lineClamp',
    'lineGrid',
    'lineHeight',
    'linePadding',
    'lineSnap',
    'lineStacking',
    'lineStackingRuby',
    'lineStackingShift',
    'lineStackingStrategy',
    'listStyle',
    'listStyleImage',
    'listStylePosition',
    'listStyleType',
    'margin',
    'marginBlock',
    'marginBlockEnd',
    'marginBlockStart',
    'marginBottom',
    'marginInline',
    'marginInlineEnd',
    'marginInlineStart',
    'marginLeft',
    'marginRight',
    'marginTop',
    'marginTrim',
    'markerSide',
    'mask',
    'maskBorder',
    'maskBorderMode',
    'maskBorderOutset',
    'maskBorderRepeat',
    'maskBorderSlice',
    'maskBorderSource',
    'maskBorderWidth',
    'maskClip',
    'maskComposite',
    'maskImage',
    'maskMode',
    'maskOrigin',
    'maskPosition',
    'maskRepeat',
    'maskSize',
    'maskType',
    'maxBlockSize',
    'maxHeight',
    'maxInlineSize',
    'maxLines',
    'maxWidth',
    'minBlockSize',
    'minHeight',
    'minInlineSize',
    'minWidth',
    'mixBlendMode',
    'navDown',
    'navLeft',
    'navRight',
    'navUp',
    'objectFit',
    'objectPosition',
    'offset',
    'offsetAfter',
    'offsetAnchor',
    'offsetBefore',
    'offsetDistance',
    'offsetEnd',
    'offsetPath',
    'offsetPosition',
    'offsetRotate',
    'offsetStart',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outlineColor',
    'outlineOffset',
    'outlineStyle',
    'outlineWidth',
    'overflow',
    'overflowBlock',
    'overflowInline',
    'overflowWrap',
    'overflowX',
    'overflowY',
    'padding',
    'paddingBlock',
    'paddingBlockEnd',
    'paddingBlockStart',
    'paddingBottom',
    'paddingInline',
    'paddingInlineEnd',
    'paddingInlineStart',
    'paddingLeft',
    'paddingRight',
    'paddingTop',
    'page',
    'pageBreakAfter',
    'pageBreakBefore',
    'pageBreakInside',
    'pause',
    'pauseAfter',
    'pauseBefore',
    'perspective',
    'perspectiveOrigin',
    'pitch',
    'pitchRange',
    'placeContent',
    'placeItems',
    'placeSelf',
    'playDuring',
    'position',
    'quotes',
    'regionFragment',
    'resize',
    'richness',
    'right',
    'rowGap',
    'rubyAlign',
    'rubyMerge',
    'rubyPosition',
    'running',
    'scrollBehavior',
    'scrollMargin',
    'scrollMarginBlock',
    'scrollMarginBlockEnd',
    'scrollMarginBlockStart',
    'scrollMarginBottom',
    'scrollMarginInline',
    'scrollMarginInlineEnd',
    'scrollMarginInlineStart',
    'scrollMarginLeft',
    'scrollMarginRight',
    'scrollMarginTop',
    'scrollPadding',
    'scrollPaddingBlock',
    'scrollPaddingBlockEnd',
    'scrollPaddingBlockStart',
    'scrollPaddingBottom',
    'scrollPaddingInline',
    'scrollPaddingInlineEnd',
    'scrollPaddingInlineStart',
    'scrollPaddingLeft',
    'scrollPaddingRight',
    'scrollPaddingTop',
    'scrollSnapAlign',
    'scrollSnapStop',
    'scrollSnapType',
    'shapeImageThreshold',
    'shapeInside',
    'shapeMargin',
    'shapeOutside',
    'speak',
    'speakHeader',
    'speakNumeral',
    'speakPunctuation',
    'speechRate',
    'stress',
    'stringSet',
    'tabSize',
    'tableLayout',
    'textAlign',
    'textAlignAll',
    'textAlignLast',
    'textCombineUpright',
    'textDecoration',
    'textDecorationColor',
    'textDecorationLine',
    'textDecorationStyle',
    'textEmphasis',
    'textEmphasisColor',
    'textEmphasisPosition',
    'textEmphasisStyle',
    'textGroupAlign',
    'textHeight',
    'textIndent',
    'textJustify',
    'textOrientation',
    'textOverflow',
    'textShadow',
    'textSpaceCollapse',
    'textSpaceTrim',
    'textSpacing',
    'textTransform',
    'textUnderlinePosition',
    'textWrap',
    'top',
    'transform',
    'transformBox',
    'transformOrigin',
    'transformStyle',
    'transition',
    'transitionDelay',
    'transitionDuration',
    'transitionProperty',
    'transitionTimingFunction',
    'unicodeBidi',
    'userSelect',
    'verticalAlign',
    'visibility',
    'voiceFamily',
    'volume',
    'whiteSpace',
    'widows',
    'width',
    'willChange',
    'wordBreak',
    'wordSpacing',
    'wordWrap',
    'wrapAfter',
    'wrapBefore',
    'wrapFlow',
    'wrapInside',
    'wrapThrough',
    'writingMode',
    'zIndex'
];

var PROPERTY_THRESHOLD = 2046;
var SET_DATA = '小程序 setData';
var PAGE_INIT = '页面初始化';

function initStyle(ctor) {
    var properties = {};
    var loop = function ( i ) {
        var styleKey = styleProperties[i];
        properties[styleKey] = {
            get: function get() {
                return this._value[styleKey] || '';
            },
            set: function set(newVal) {
                var old = this[styleKey];
                if (newVal) {
                    this._usedStyleProp.add(styleKey);
                }
                warn(isString(newVal) && newVal.length > PROPERTY_THRESHOLD, ("Style 属性 " + styleKey + " 的值数据量过大，可能会影响渲染性能，考虑使用 CSS 类或其它方案替代。"));
                if (old !== newVal) {
                    this._value[styleKey] = newVal;
                    this._element.enqueueUpdate({
                        path: ((this._element._path) + "." + ("st")),
                        value: this.cssText
                    });
                }
            }
        };
    };

    for (var i = 0; i < styleProperties.length; i++) loop( i );
    Object.defineProperties(ctor.prototype, properties);
}
var Style = function Style(element) {
    this._element = element;
    this._usedStyleProp = new Set();
    this._value = {};
};

var prototypeAccessors$1 = { cssText: { configurable: true } };
prototypeAccessors$1.cssText.get = function () {
        var this$1 = this;

    var text = '';
    this._usedStyleProp.forEach(function (key) {
        var val = this$1[key];
        if (!val)
            { return; }
        text += (toDashed(key)) + ": " + val + ";";
    });
    return text;
};
prototypeAccessors$1.cssText.set = function (str) {
        var this$1 = this;

    if (str == null) {
        str = '';
    }
    this._usedStyleProp.forEach(function (prop) {
        this$1.removeProperty(prop);
    });
    if (str === '') {
        return;
    }
    var rules = str.split(';');
    for (var i = 0; i < rules.length; i++) {
        var rule = rules[i].trim();
        if (rule === '') {
            continue;
        }
        var ref = rule.split(':');
            var propName = ref[0];
            var val = ref[1];
        if (isUndefined(val)) {
            continue;
        }
        this.setProperty(propName.trim(), val.trim());
    }
};
Style.prototype.setProperty = function setProperty (propertyName, value) {
    propertyName = toCamelCase(propertyName);
    if (isUndefined(value)) {
        return;
    }
    if (value === null || value === '') {
        this.removeProperty(propertyName);
    }
    else {
        this[propertyName] = value;
    }
};
Style.prototype.removeProperty = function removeProperty (propertyName) {
    propertyName = toCamelCase(propertyName);
    if (!this._usedStyleProp.has(propertyName)) {
        return '';
    }
    var value = this[propertyName];
    this[propertyName] = '';
    this._usedStyleProp.delete(propertyName);
    return value;
};
Style.prototype.getPropertyValue = function getPropertyValue (propertyName) {
    propertyName = toCamelCase(propertyName);
    var value = this[propertyName];
    if (!value) {
        return '';
    }
    return value;
};

Object.defineProperties( Style.prototype, prototypeAccessors$1 );
initStyle(Style);

/* eslint-disable no-dupe-class-members */
var TaroElement = /*@__PURE__*/(function (TaroNode) {
    function TaroElement(nodeType, nodeName) {
        TaroNode.call(this, nodeType || 1 /* ELEMENT_NODE */, nodeName);
        this.props = {};
        this.dataset = EMPTY_OBJ;
        this.tagName = nodeName.toUpperCase();
        this.style = new Style(this);
        warn(this.tagName === 'MAP' && process.env.TARO_ENV === 'weapp', '微信小程序 map 组件的 `setting` 属性需要传递一个默认值。详情：\n https://developers.weixin.qq.com/miniprogram/dev/component/map.html');
    }

    if ( TaroNode ) TaroElement.__proto__ = TaroNode;
    TaroElement.prototype = Object.create( TaroNode && TaroNode.prototype );
    TaroElement.prototype.constructor = TaroElement;

    var prototypeAccessors = { id: { configurable: true },className: { configurable: true },cssText: { configurable: true },children: { configurable: true },attributes: { configurable: true },parentElement: { configurable: true },textContent: { configurable: true } };
    prototypeAccessors.id.get = function () {
        return this.getAttribute('id');
    };
    prototypeAccessors.id.set = function (val) {
        this.setAttribute('id', val);
    };
    prototypeAccessors.className.get = function () {
        return this.getAttribute('class') || '';
    };
    prototypeAccessors.className.set = function (val) {
        this.setAttribute('class', val);
    };
    prototypeAccessors.cssText.get = function () {
        return this.getAttribute('style') || '';
    };
    prototypeAccessors.children.get = function () {
        return this.childNodes.filter(isElement);
    };
    TaroElement.prototype.hasAttribute = function hasAttribute (qualifiedName) {
        return !isUndefined(this.props[qualifiedName]);
    };
    TaroElement.prototype.hasAttributes = function hasAttributes () {
        return this.attributes.length > 0;
    };
    TaroElement.prototype.focus = function focus () {
        this.setAttribute('focus', true);
    };
    TaroElement.prototype.blur = function blur () {
        this.setAttribute('focus', false);
    };
    TaroElement.prototype.setAttribute = function setAttribute (qualifiedName, value) {
        warn(isString(value) && value.length > PROPERTY_THRESHOLD, ("元素 " + (this.nodeName) + " 的 属性 " + qualifiedName + " 的值数据量过大，可能会影响渲染性能。"));
        if (qualifiedName === 'style') {
            this.style.cssText = value;
            qualifiedName = "st" /* Style */;
        }
        else if (qualifiedName === 'id') {
            eventSource.delete(this.uid);
            this.props[qualifiedName] = this.uid = value;
            eventSource.set(value, this);
            qualifiedName = 'uid';
        }
        else {
            this.props[qualifiedName] = value;
            if (qualifiedName === 'class') {
                qualifiedName = "cl" /* Class */;
            }
            if (qualifiedName.startsWith('data-')) {
                if (this.dataset === EMPTY_OBJ) {
                    this.dataset = Object.create(null);
                }
                this.dataset[toCamelCase(qualifiedName.replace(/^data-/, ''))] = value;
            }
        }
        this.enqueueUpdate({
            path: ((this._path) + "." + qualifiedName),
            value: value
        });
    };
    TaroElement.prototype.removeAttribute = function removeAttribute (qualifiedName) {
        if (qualifiedName === 'style') {
            this.style.cssText = '';
        }
        else {
            delete this.props[qualifiedName];
        }
        this.enqueueUpdate({
            path: ((this._path) + "." + qualifiedName),
            value: ''
        });
    };
    TaroElement.prototype.getAttribute = function getAttribute (qualifiedName) {
        var attr = qualifiedName === 'style' ? this.style.cssText : this.props[qualifiedName];
        return attr !== null && attr !== void 0 ? attr : '';
    };
    prototypeAccessors.attributes.get = function () {
        var this$1 = this;

        var propKeys = Object.keys(this.props);
        var style = this.style.cssText;
        var attrs = propKeys.map(function (p) { return ({ name: p, value: this$1.props[p] }); });
        return attrs.concat(style ? { name: 'style', value: style } : []);
    };
    prototypeAccessors.parentElement.get = function () {
        if (this.parentNode instanceof TaroElement) {
            return this.parentNode;
        }
        return null;
    };
    TaroElement.prototype.dispatchEvent = function dispatchEvent (event) {
        var cancelable = event.cancelable;
        var listeners = this.__handlers[event.type];
        if (!isArray(listeners)) {
            return;
        }
        for (var i = listeners.length; i--;) {
            var listener = listeners[i];
            var result = (void 0);
            if (listener._stop) {
                listener._stop = false;
            }
            else {
                result = listener.call(this, event);
            }
            if ((result === false || event._end) && cancelable) {
                event.defaultPrevented = true;
            }
            if (event._end && event._stop) {
                break;
            }
        }
        if (event._stop) {
            this._stopPropagation(event);
        }
        else {
            event._stop = true;
        }
        return listeners != null;
    };
    prototypeAccessors.textContent.get = function () {
        var text = '';
        for (var i = 0; i < this.childNodes.length; i++) {
            var element = this.childNodes[i];
            text += element.textContent;
        }
        return text;
    };
    prototypeAccessors.textContent.set = function (text) {
        TaroNode.prototype.textContent = text;
    };
    TaroElement.prototype._stopPropagation = function _stopPropagation (event) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var target = this;
        // eslint-disable-next-line no-cond-assign
        while ((target = target.parentNode)) {
            var listeners = target.__handlers[event.type];
            if (!isArray(listeners)) {
                continue;
            }
            for (var i = listeners.length; i--;) {
                var l = listeners[i];
                l._stop = true;
            }
        }
    };

    Object.defineProperties( TaroElement.prototype, prototypeAccessors );

    return TaroElement;
}(TaroNode));

var FormElement = /*@__PURE__*/(function (TaroElement) {
    function FormElement () {
        TaroElement.apply(this, arguments);
    }

    if ( TaroElement ) FormElement.__proto__ = TaroElement;
    FormElement.prototype = Object.create( TaroElement && TaroElement.prototype );
    FormElement.prototype.constructor = FormElement;

    var prototypeAccessors = { value: { configurable: true } };

    prototypeAccessors.value.get = function () {
        // eslint-disable-next-line dot-notation
        var val = this.props['value'];
        return val == null ? '' : val;
    };
    prototypeAccessors.value.set = function (val) {
        this.setAttribute('value', val);
    };

    Object.defineProperties( FormElement.prototype, prototypeAccessors );

    return FormElement;
}(TaroElement));

var options = {
    prerender: true,
    debug: false
};

var Performance = function Performance() {
    this.recorder = new Map();
};
Performance.prototype.start = function start (id) {
    if (!options.debug) {
        return;
    }
    this.recorder.set(id, Date.now());
};
Performance.prototype.stop = function stop (id) {
    if (!options.debug) {
        return;
    }
    var now = Date.now();
    var prev = this.recorder.get(id);
    var time = now - prev;
    // eslint-disable-next-line no-console
    console.log((id + " 时长： " + time + "ms"));
};
var perf = new Performance();

var TaroRootElement = /*@__PURE__*/(function (TaroElement) {
    function TaroRootElement() {
        TaroElement.call(this, 1 /* ELEMENT_NODE */, 'root');
        this.pendingUpdate = false;
        this.updatePayloads = [];
        this.ctx = null;
    }

    if ( TaroElement ) TaroRootElement.__proto__ = TaroElement;
    TaroRootElement.prototype = Object.create( TaroElement && TaroElement.prototype );
    TaroRootElement.prototype.constructor = TaroRootElement;

    var prototypeAccessors = { _path: { configurable: true },_root: { configurable: true } };
    prototypeAccessors._path.get = function () {
        return 'root';
    };
    prototypeAccessors._root.get = function () {
        return this;
    };
    TaroRootElement.prototype.enqueueUpdate = function enqueueUpdate (payload) {
        this.updatePayloads.push(payload);
        if (this.pendingUpdate || this.ctx === null) {
            return;
        }
        this.performUpdate();
    };
    TaroRootElement.prototype.performUpdate = function performUpdate (initRender, prerender) {
        var this$1 = this;
        if ( initRender === void 0 ) initRender = false;

        this.pendingUpdate = true;
        var ctx = this.ctx;
        setTimeout(function () {
            perf.start(SET_DATA);
            var data = Object.create(null);
            var resetPaths = new Set(initRender
                ? ['root.cn.[0]', 'root.cn[0]']
                : []);
            while (this$1.updatePayloads.length > 0) {
                var ref = this$1.updatePayloads.shift();
                var path = ref.path;
                var value = ref.value;
                if (path.endsWith("cn" /* Childnodes */)) {
                    resetPaths.add(path);
                }
                data[path] = value;
            }
            var loop = function ( path ) {
                resetPaths.forEach(function (p) {
                    // 已经重置了数组，就不需要分别再设置了
                    if (path$1.includes(p) && path$1 !== p) {
                        delete data[path$1];
                    }
                });
                var value$1 = data[path$1];
                if (isFunction(value$1)) {
                    data[path$1] = value$1();
                }
            };

            for (var path$1 in data) loop();
            if (isFunction(prerender)) {
                prerender(data);
            }
            else {
                this$1.pendingUpdate = false;
                ctx.setData(data, function () {
                    perf.stop(SET_DATA);
                    if (initRender) {
                        perf.stop(PAGE_INIT);
                    }
                });
            }
        }, 0);
    };

    Object.defineProperties( TaroRootElement.prototype, prototypeAccessors );

    return TaroRootElement;
}(TaroElement));

var isBrowser = typeof document !== 'undefined' && !!document.scripts;
var doc = isBrowser ? document : EMPTY_OBJ;
var win = isBrowser ? window : EMPTY_OBJ;

var TaroDocument = /*@__PURE__*/(function (TaroElement) {
    function TaroDocument() {
        TaroElement.call(this, 9 /* DOCUMENT_NODE */, '#document');
    }

    if ( TaroElement ) TaroDocument.__proto__ = TaroElement;
    TaroDocument.prototype = Object.create( TaroElement && TaroElement.prototype );
    TaroDocument.prototype.constructor = TaroDocument;
    TaroDocument.prototype.createElement = function createElement (type) {
        if (type === 'root') {
            return new TaroRootElement();
        }
        if (controlledComponent.has(type)) {
            return new FormElement(1 /* ELEMENT_NODE */, type);
        }
        return new TaroElement(1 /* ELEMENT_NODE */, type);
    };
    TaroDocument.prototype.createTextNode = function createTextNode (text) {
        return new TaroText(text);
    };
    TaroDocument.prototype.getElementById = function getElementById (id) {
        var el = eventSource.get(id);
        return isUndefined(el) ? null : el;
    };

    return TaroDocument;
}(TaroElement));
function createDocument() {
    var doc = new TaroDocument();
    doc.appendChild((doc.documentElement = doc.createElement('html')));
    doc.documentElement.appendChild((doc.head = doc.createElement('head')));
    doc.documentElement.appendChild((doc.createElement('body')));
    var app = doc.createElement('app');
    app.id = 'app';
    var container = doc.createElement('container'); // 多包一层主要为了兼容 vue
    container.appendChild(app);
    doc.documentElement.lastChild.appendChild(container);
    return doc;
}
var document$1 = (isBrowser ? doc : createDocument());

var machine = 'Macintosh';
var arch = 'Intel Mac OS X 10_14_5';
var engine = 'AppleWebKit/534.36 (KHTML, like Gecko) NodeJS/v4.1.0 Chrome/76.0.3809.132 Safari/534.36';
var navigator = isBrowser ? win.navigator : {
    appCodeName: 'Mozilla',
    appName: 'Netscape',
    appVersion: '5.0 (' + machine + '; ' + arch + ') ' + engine,
    cookieEnabled: true,
    mimeTypes: [],
    onLine: true,
    platform: 'MacIntel',
    plugins: [],
    product: 'Gecko',
    productSub: '20030107',
    userAgent: 'Mozilla/5.0 (' + machine + '; ' + arch + ') ' + engine,
    vendor: 'Joyent',
    vendorSub: ''
};

var window$1 = isBrowser ? win : {
    navigator: navigator,
    document: document$1
};
if (process.env.TARO_ENV === 'tt') {
    window$1.requestAnimationFrame = requestAnimationFrame;
    window$1.cancelAnimationFrame = cancelAnimationFrame;
    window$1.Date = Date;
    window$1.setTimeout = setTimeout;
}

var Current = {
    app: null,
    router: null,
    page: null
};

var instances = new Map();
function injectPageInstance(inst, id) {
    instances.set(id, inst);
}
function getPageInstance(id) {
    return instances.get(id);
}
function addLeadingSlash(path) {
    if (path == null) {
        return '';
    }
    return path.charAt(0) === '/' ? path : '/' + path;
}
var pageId = incrementId();
function safeExecute(instance, lifecycle) {
    var args = [], len = arguments.length - 2;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 2 ];

    var isReact = process.env.FRAMEWORK !== 'vue'; // isReact means all kind of react-like library
    if (instance == null) {
        return;
    }
    if (isReact) {
        if (lifecycle === 'onShow') {
            lifecycle = 'componentDidShow';
        }
        else if (lifecycle === 'onHide') {
            lifecycle = 'componentDidHide';
        }
    }
    var func = isReact ? instance[lifecycle] : instance.$options[lifecycle];
    if (!isFunction(func)) {
        return;
    }
    return func.apply(instance, args);
}
function createPageConfig(component, pageName, data) {
    var id = pageName !== null && pageName !== void 0 ? pageName : ("taro_page_" + (pageId()));
    // 小程序 Page 构造器是一个傲娇小公主，不能把复杂的对象挂载到参数上
    var pageElement = null;
    var instance = instances.get(id);
    var config = {
        onLoad: function onLoad(options, cb) {
            var this$1 = this;

            Current.router = {
                params: options,
                path: addLeadingSlash(this.route || this.__route__)
            };
            perf.start(PAGE_INIT);
            Current.app.mount(component, id, function () {
                pageElement = document$1.getElementById(id);
                instance = instances.get(id) || EMPTY_OBJ;
                ensure(pageElement !== null, '没有找到页面实例。');
                safeExecute(instance, 'onLoad', options);
                if (!isBrowser) {
                    pageElement.ctx = this$1;
                    pageElement.performUpdate(true, cb);
                }
            });
        },
        onUnload: function onUnload() {
            Current.app.unmount(id, function () {
                if (pageElement) {
                    pageElement.ctx = null;
                }
            });
        },
        onShow: function onShow() {
            Current.page = this;
            safeExecute(instance, 'onShow');
        },
        onHide: function onHide() {
            Current.page = null;
            Current.router = null;
            safeExecute(instance, 'onHide');
        },
        onPullDownRefresh: function onPullDownRefresh() {
            return safeExecute(instance, 'onPullDownRefresh');
        },
        onReachBottom: function onReachBottom() {
            return safeExecute(instance, 'onReachBottom');
        },
        onPageScroll: function onPageScroll(options) {
            return safeExecute(instance, 'onPageScroll', options);
        },
        onShareAppMessage: function onShareAppMessage(options) {
            var target = options.target;
            if (target != null) {
                var id = target.id;
                var element = document$1.getElementById(id);
                if (element != null) {
                    options.target.dataset = element.dataset;
                }
            }
            return safeExecute(instance, 'onShareAppMessage', options);
        },
        onResize: function onResize(options) {
            return safeExecute(instance, 'onResize', options);
        },
        onTabItemTap: function onTabItemTap(options) {
            return safeExecute(instance, 'onTabItemTap', options);
        },
        onTitleClick: function onTitleClick() {
            return safeExecute(instance, 'onTitleClick');
        },
        onOptionMenuClick: function onOptionMenuClick() {
            return safeExecute(instance, 'onOptionMenuClick');
        },
        onPopMenuClick: function onPopMenuClick() {
            return safeExecute(instance, 'onPopMenuClick');
        },
        onPullIntercept: function onPullIntercept() {
            return safeExecute(instance, 'onPullIntercept');
        }
    };
    config.eh = eventHandler;
    if (!isUndefined(data)) {
        config.data = data;
    }
    if (isBrowser) {
        config.path = id;
    }
    return config;
}
function createComponentConfig(component, componentName, data) {
    var _a, _b, _c;
    var id = componentName !== null && componentName !== void 0 ? componentName : ("taro_component_" + (pageId()));
    var componentElement = null;
    var instance = instances.get(id);
    var config = {
        attached: function attached() {
            var this$1 = this;

            perf.start(PAGE_INIT);
            Current.app.mount(component, id, function () {
                componentElement = document$1.getElementById(id);
                instance = instances.get(id) || EMPTY_OBJ;
                ensure(componentElement !== null, '没有找到组件实例。');
                safeExecute(instance, 'onLoad');
                if (!isBrowser) {
                    componentElement.ctx = this$1;
                    componentElement.performUpdate(true);
                }
            });
        },
        detached: function detached() {
            Current.app.unmount(id, function () {
                if (componentElement) {
                    componentElement.ctx = null;
                }
            });
        },
        pageLifetimes: {
            show: function show() {
                safeExecute(instance, 'onShow');
            },
            hide: function hide() {
                safeExecute(instance, 'onHide');
            }
        },
        methods: {
            eh: eventHandler
        }
    };
    if (!isUndefined(data)) {
        config.data = data;
    }
    config['options'] = (_a = component === null || component === void 0 ? void 0 : component['options']) !== null && _a !== void 0 ? _a : EMPTY_OBJ;
    config['externalClasses'] = (_b = component === null || component === void 0 ? void 0 : component['externalClasses']) !== null && _b !== void 0 ? _b : EMPTY_OBJ;
    config['behaviors'] = (_c = component === null || component === void 0 ? void 0 : component['behaviors']) !== null && _c !== void 0 ? _c : EMPTY_OBJ;
    return config;
}
function createRecursiveComponentConfig() {
    var obj;

    return {
        properties: {
            i: {
                type: Object,
                value: ( obj = {}, obj["nn" /* NodeName */] = 'view', obj )
            }
        },
        options: {
            addGlobalClass: true
        },
        methods: {
            eh: eventHandler
        }
    };
}

function connectReactPage(R, id) {
    var h = R.createElement;
    return function (component) {
        var _a;
        // eslint-disable-next-line dot-notation
        var isReactComponent = isFunction(component['render']) ||
            !!((_a = component.prototype) === null || _a === void 0 ? void 0 : _a.isReactComponent) ||
            component.prototype instanceof R.Component; // compat for some others react-like library
        var inject = function (node) { return node && injectPageInstance(node, id); };
        var refs = isReactComponent ? { ref: inject } : { forwardedRef: inject };
        if (PageContext === EMPTY_OBJ) {
            PageContext = R.createContext('');
        }
        return /*@__PURE__*/(function (superclass) {
            function Page() {
                superclass.apply(this, arguments);
                this.state = {
                    hasError: false
                };
            }

            if ( superclass ) Page.__proto__ = superclass;
            Page.prototype = Object.create( superclass && superclass.prototype );
            Page.prototype.constructor = Page;
            Page.getDerivedStateFromError = function getDerivedStateFromError (error) {
                console.warn(error);
                return { hasError: true };
            };
            // React 16 uncaught error 会导致整个应用 crash，
            // 目前把错误缩小到页面
            Page.prototype.componentDidCatch = function componentDidCatch (error, info) {
                console.warn(error);
                console.error(info.componentStack);
            };
            Page.prototype.render = function render () {
                var children = this.state.hasError
                    ? []
                    : h(PageContext.Provider, { value: id }, h(component, Object.assign(Object.assign({}, this.props), refs)));
                if (isBrowser) {
                    return h('div', { id: id, className: 'taro_page' }, children);
                }
                return h('root', { id: id }, children);
            };

            return Page;
        }(R.Component));
    };
}
// 初始值设置为 any 主要是为了过 TS 的校验
var R = EMPTY_OBJ;
var PageContext = EMPTY_OBJ;
var ReactDOM;
if (process.env.FRAMEWORK === 'nerv') {
    R = require('nervjs');
    ReactDOM = R;
}
// 其它 react-like 框架走 react 模式，在 webpack.resolve.alias 设置 react/react-dom 到对应包
if (process.env.FRAMEWORK === 'react') {
    R = require('react');
    ReactDOM = require('react-dom');
}
function createReactApp(App, react) {
    ensure(!!ReactDOM, '构建 React/Nerv 项目请把 process.env.FRAMEWORK 设置为 \'react\'/\'nerv\' ');
    if (react != null) {
        R = react;
    }
    var ref = R.createRef();
    var wrapper;
    var AppWrapper = /*@__PURE__*/(function (superclass) {
        function AppWrapper() {
            superclass.apply(this, arguments);
            // run createElement() inside the render function to make sure that owner is right
            this.pages = [];
            this.elements = [];
        }

        if ( superclass ) AppWrapper.__proto__ = superclass;
        AppWrapper.prototype = Object.create( superclass && superclass.prototype );
        AppWrapper.prototype.constructor = AppWrapper;
        AppWrapper.prototype.mount = function mount (component, id, cb) {
            var page = function () { return R.createElement(component, { key: id, tid: id }); };
            this.pages.push(page);
            this.forceUpdate(cb);
        };
        AppWrapper.prototype.unmount = function unmount (id, cb) {
            for (var i = 0; i < this.elements.length; i++) {
                var element = this.elements[i];
                if (element.key === id) {
                    this.elements.splice(i, 1);
                    break;
                }
            }
            this.forceUpdate(cb);
        };
        AppWrapper.prototype.render = function render () {
            while (this.pages.length > 0) {
                var page = this.pages.pop();
                this.elements.push(page());
            }
            return R.createElement(App, { ref: ref }, isBrowser ? R.createElement('div', null, this.elements.slice()) : this.elements.slice());
        };

        return AppWrapper;
    }(R.Component));
    var AppConfig = function AppConfig () {};

    AppConfig.prototype.onLaunch = function onLaunch () {
        wrapper = ReactDOM.render(R.createElement(AppWrapper), document$1.getElementById('app'));
    };
    AppConfig.prototype.onShow = function onShow (options) {
        var app = ref.current;
        Current.router = Object.assign({ params: options === null || options === void 0 ? void 0 : options.query }, options);
        if (app != null && isFunction(app.componentDidShow)) {
            app.componentDidShow(options);
        }
    };
    AppConfig.prototype.onHide = function onHide (options) {
        var app = ref.current;
        if (app != null && isFunction(app.componentDidHide)) {
            app.componentDidHide(options);
        }
    };
    AppConfig.prototype.render = function render (cb) {
        wrapper.forceUpdate(cb);
    };
    AppConfig.prototype.mount = function mount (component, id, cb) {
        var page = connectReactPage(R, id)(component);
        wrapper.mount(page, id, cb);
    };
    AppConfig.prototype.unmount = function unmount (id, cb) {
        wrapper.unmount(id, cb);
    };
    Current.app = new AppConfig();
    return Current.app;
}

function connectVuePage(Vue, id) {
    return function (component) {
        var injectedPage = Vue.extend({
            props: {
                tid: String
            },
            mixins: [component, {
                    created: function created() {
                        injectPageInstance(this, id);
                    }
                }]
        });
        var options = {
            render: function render(h) {
                return h('root', {
                    attrs: {
                        id: id
                    }
                }, [
                    h(injectedPage, { props: { tid: id } })
                ]);
            }
        };
        return options;
    };
}
var Vue;
// webpack 开发模式不会执行 tree-shaking，因此我们需要做此判断
if (process.env.FRAMEWORK === 'vue') {
    var v = require('vue');
    Vue = v.default || v;
}
function createVueApp(App, vue) {
    ensure(!!Vue, '构建 Vue 项目请把 process.env.FRAMEWORK 设置为 \'vue\'');
    if (vue != null) {
        Vue = vue;
    }
    Vue.config.getTagNamespace = noop;
    var elements = [];
    var pages = [];
    var appInstance;
    var wrapper = new Vue({
        render: function render(h) {
            while (pages.length > 0) {
                var page = pages.pop();
                elements.push(page(h));
            }
            return h(App.$options, { ref: 'app' }, elements.slice());
        },
        methods: {
            mount: function mount(component, id, cb) {
                pages.push(function (h) { return h(component, { key: id }); });
                this.updateSync(cb);
            },
            updateSync: function updateSync(cb) {
                this._update(this._render(), false);
                this.$children.forEach(function (child) { return child._update(child._render(), false); });
                cb();
            },
            unmount: function unmount(id, cb) {
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if (element.key === id) {
                        elements.splice(i, 1);
                        break;
                    }
                }
                this.updateSync(cb);
            }
        }
    });
    var AppConfig = function AppConfig () {};

    AppConfig.prototype.onLaunch = function onLaunch () {
        wrapper.$mount(document$1.getElementById('app'));
        appInstance = wrapper.$refs.app;
    };
    AppConfig.prototype.onShow = function onShow (options) {
        Current.router = Object.assign({ params: options === null || options === void 0 ? void 0 : options.query }, options);
        if (appInstance != null && isFunction(appInstance.$options.onShow)) {
            appInstance.$options.onShow.call(appInstance, options);
        }
    };
    AppConfig.prototype.onHide = function onHide (options) {
        if (appInstance != null && isFunction(appInstance.$options.onHide)) {
            appInstance.$options.onHide.call(appInstance, options);
        }
    };
    AppConfig.prototype.mount = function mount (component, id, cb) {
        var page = connectVuePage(Vue, id)(component);
        wrapper.mount(page, id, cb);
    };
    AppConfig.prototype.unmount = function unmount (id, cb) {
        wrapper.unmount(id, cb);
    };
    Current.app = new AppConfig();
    return Current.app;
}

var taroHooks = function (lifecycle) {
    return function (fn) {
        var id = R.useContext(PageContext);
        R.useLayoutEffect(function () {
            var inst = getPageInstance(id);
            var first = false;
            if (inst == null) {
                first = true;
                inst = Object.create(null);
            }
            inst[lifecycle] = fn.bind(null);
            if (first) {
                injectPageInstance(inst, id);
            }
        }, []);
    };
};
var useDidShow = taroHooks('componentDidShow');
var useDidHide = taroHooks('componentDidHide');
var usePullDownRefresh = taroHooks('onPullDownRefresh');
var useReachBottom = taroHooks('onReachBottom');
var usePageScroll = taroHooks('onPageScroll');
var useResize = taroHooks('onResize');
var useShareAppMessage = taroHooks('onShareAppMessage');
var useTabItemTap = taroHooks('onTabItemTap');
var useTitleClick = taroHooks('onTitleClick');
var useOptionMenuClick = taroHooks('onOptionMenuClick');
var usePullIntercept = taroHooks('onPullIntercept');
var useRouter = function () { return Current.router; };
var useScope = function () { return undefined; };

var nextTick = function (cb) {
    setTimeout(cb, 1);
};

var Events = function Events(opts) {
    if (typeof opts !== 'undefined' && opts.callbacks) {
        this.callbacks = opts.callbacks;
    }
    else {
        this.callbacks = {};
    }
};
Events.prototype.on = function on (eventName, callback, context) {
    var event, node, tail, list;
    if (!callback) {
        return this;
    }
    eventName = eventName.split(Events.eventSplitter);
    var calls = this.callbacks;
    while ((event = eventName.shift())) {
        list = calls[event];
        node = list ? list.tail : {};
        node.next = tail = {};
        node.context = context;
        node.callback = callback;
        calls[event] = {
            tail: tail,
            next: list ? list.next : node
        };
    }
    return this;
};
Events.prototype.once = function once (events, callback, context) {
        var this$1 = this;

    var wrapper = function () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

        callback.apply(this$1, args);
        this$1.off(events, wrapper, context);
    };
    this.on(events, wrapper, context);
    return this;
};
Events.prototype.off = function off (events, callback, context) {
    var event, calls, node, tail, cb, ctx;
    if (!(calls = this.callbacks)) {
        return this;
    }
    if (!(events || callback || context)) {
        delete this.callbacks;
        return this;
    }
    events = events ? events.split(Events.eventSplitter) : Object.keys(calls);
    while ((event = events.shift())) {
        node = calls[event];
        delete calls[event];
        if (!node || !(callback || context)) {
            continue;
        }
        tail = node.tail;
        while ((node = node.next) !== tail) {
            cb = node.callback;
            ctx = node.context;
            if ((callback && cb !== callback) || (context && ctx !== context)) {
                this.on(event, cb, ctx);
            }
        }
    }
    return this;
};
Events.prototype.trigger = function trigger (events) {
    var event, node, calls, tail;
    if (!(calls = this.callbacks)) {
        return this;
    }
    events = events.split(Events.eventSplitter);
    var rest = [].slice.call(arguments, 1);
    while ((event = events.shift())) {
        if ((node = calls[event])) {
            tail = node.tail;
            while ((node = node.next) !== tail) {
                node.callback.apply(node.context || this, rest);
            }
        }
    }
    return this;
};
Events.eventSplitter = /\s+/;
if (process.env.TARO_ENV === 'alipay') {
    if (!my.taroEventCenter) {
        my.taroEventCenter = new Events();
    }
    exports.eventCenter = my.taroEventCenter;
}
else {
    exports.eventCenter = new Events();
}

exports.Current = Current;
exports.Events = Events;
exports.Style = Style;
exports.TaroElement = TaroElement;
exports.TaroEvent = TaroEvent;
exports.TaroNode = TaroNode;
exports.TaroRootElement = TaroRootElement;
exports.TaroText = TaroText;
exports.connectReactPage = connectReactPage;
exports.connectVuePage = connectVuePage;
exports.createComponentConfig = createComponentConfig;
exports.createDocument = createDocument;
exports.createEvent = createEvent;
exports.createPageConfig = createPageConfig;
exports.createReactApp = createReactApp;
exports.createRecursiveComponentConfig = createRecursiveComponentConfig;
exports.createVueApp = createVueApp;
exports.document = document$1;
exports.hydrate = hydrate;
exports.injectPageInstance = injectPageInstance;
exports.navigator = navigator;
exports.nextTick = nextTick;
exports.options = options;
exports.useDidHide = useDidHide;
exports.useDidShow = useDidShow;
exports.useOptionMenuClick = useOptionMenuClick;
exports.usePageScroll = usePageScroll;
exports.usePullDownRefresh = usePullDownRefresh;
exports.usePullIntercept = usePullIntercept;
exports.useReachBottom = useReachBottom;
exports.useResize = useResize;
exports.useRouter = useRouter;
exports.useScope = useScope;
exports.useShareAppMessage = useShareAppMessage;
exports.useTabItemTap = useTabItemTap;
exports.useTitleClick = useTitleClick;
exports.window = window$1;
//# sourceMappingURL=index.js.map
