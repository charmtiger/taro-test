"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const logHelper_1 = require("./utils/logHelper");
const build_conf_1 = require("./webpack/build.conf");
const prerender_1 = require("./prerender/prerender");
const customizeChain = (chain, customizeFunc) => {
    if (customizeFunc instanceof Function) {
        customizeFunc(chain, webpack);
    }
};
function build(appPath, config, mainBuilder) {
    const mode = config.isWatch ? 'development' : 'production';
    return new Promise((resolve, reject) => {
        const { buildAdapter } = config;
        if (buildAdapter === "plugin" /* PLUGIN */) {
            config.buildAdapter = "weapp" /* WEAPP */;
            config.isBuildPlugin = true;
        }
        const webpackChain = build_conf_1.default(appPath, mode, config);
        customizeChain(webpackChain, config.webpackChain);
        const webpackConfig = webpackChain.toConfig();
        const compiler = webpack(webpackConfig);
        let prerender;
        if (config.isWatch) {
            logHelper_1.bindDevLogger(compiler, config.buildAdapter);
            compiler.watch({
                aggregateTimeout: 300,
                poll: undefined
            }, (err, stats) => {
                if (err) {
                    logHelper_1.printBuildError(err);
                    return reject(err);
                }
                if (config.prerender) {
                    if (prerender == null) {
                        prerender = new prerender_1.Prerender(config, webpackConfig, stats);
                    }
                    prerender.render().then(() => {
                        mainBuilder.hooks.afterBuild.call(stats);
                        resolve();
                    });
                }
                else {
                    mainBuilder.hooks.afterBuild.call(stats);
                    resolve();
                }
            });
        }
        else {
            logHelper_1.bindProdLogger(compiler, config.buildAdapter);
            compiler.run((err, stats) => {
                if (err) {
                    logHelper_1.printBuildError(err);
                    return reject(err);
                }
                if (config.prerender) {
                    if (prerender == null) {
                        prerender = new prerender_1.Prerender(config, webpackConfig, stats);
                    }
                    prerender.render().then(() => {
                        mainBuilder.hooks.afterBuild.call(stats);
                        resolve();
                    });
                }
                else {
                    mainBuilder.hooks.afterBuild.call(stats);
                    resolve();
                }
            });
        }
    });
}
exports.default = build;
