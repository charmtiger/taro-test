"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const webpack_sources_1 = require("webpack-sources");
const loader_utils_1 = require("loader-utils");
const shared_1 = require("@tarojs/shared");
const runner_utils_1 = require("@tarojs/runner-utils");
const component_1 = require("../template/component");
const PLUGIN_NAME = 'TaroLoadChunksPlugin';
class TaroLoadChunksPlugin {
    constructor(options) {
        this.commonChunks = options.commonChunks;
        this.buildAdapter = options.buildAdapter;
        this.isBuildPlugin = options.isBuildPlugin;
        this.framework = options.framework;
        this.addChunkPages = options.addChunkPages;
    }
    apply(compiler) {
        let pagesList;
        const addChunkPagesList = new Map();
        compiler.hooks.getPages.tap(PLUGIN_NAME, pages => {
            pagesList = pages;
        });
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {
            let commonChunks;
            compilation.hooks.afterOptimizeChunks.tap(PLUGIN_NAME, (chunks) => {
                commonChunks = chunks.filter(chunk => this.commonChunks.includes(chunk.name)).reverse();
                for (const chunk of commonChunks) {
                    let needBreak = false;
                    chunk.modulesIterable.forEach((m) => {
                        if (m.rawRequest === runner_utils_1.taroJsComponents) {
                            const includes = component_1.componentConfig.includes;
                            m.usedExports.map(shared_1.toDashed).map(includes.add.bind(includes));
                            needBreak = true;
                        }
                    });
                    if (needBreak) {
                        break;
                    }
                }
            });
            compilation.chunkTemplate.hooks.renderWithEntry.tap(PLUGIN_NAME, (modules, chunk) => {
                if (chunk.entryModule) {
                    if (this.isBuildPlugin) {
                        return addRequireToSource(getIdOrName(chunk), modules, commonChunks);
                    }
                    let entryModule = chunk.entryModule.rootModule ? chunk.entryModule.rootModule : chunk.entryModule;
                    if (entryModule.miniType === runner_utils_1.META_TYPE.ENTRY) {
                        compilation.hooks.afterOptimizeAssets.tap(PLUGIN_NAME, assets => {
                            const files = chunk.files;
                            files.forEach(item => {
                                if (runner_utils_1.REG_STYLE.test(item)) {
                                    const source = new webpack_sources_1.ConcatSource();
                                    const _source = assets[item]._source || assets[item]._value;
                                    Object.keys(assets).forEach(assetName => {
                                        const fileName = path.basename(assetName, path.extname(assetName));
                                        if (runner_utils_1.REG_STYLE.test(assetName) && this.commonChunks.includes(fileName)) {
                                            source.add(`@import ${JSON.stringify(loader_utils_1.urlToRequest(assetName))}`);
                                            source.add('\n');
                                            source.add(_source);
                                            if (assets[item]._source) {
                                                assets[item]._source = source;
                                            }
                                            else {
                                                assets[item]._value = source.source();
                                            }
                                        }
                                    });
                                }
                            });
                        });
                        return addRequireToSource(getIdOrName(chunk), modules, commonChunks);
                    }
                    if ((this.buildAdapter === "quickapp" /* QUICKAPP */) &&
                        (entryModule.miniType === runner_utils_1.META_TYPE.PAGE ||
                            entryModule.miniType === runner_utils_1.META_TYPE.COMPONENT)) {
                        return addRequireToSource(getIdOrName(chunk), modules, commonChunks);
                    }
                    if (typeof this.addChunkPages === 'function' && entryModule.miniType === runner_utils_1.META_TYPE.PAGE) {
                        const id = getIdOrName(chunk);
                        let source;
                        this.addChunkPages(addChunkPagesList, Array.from(pagesList).map((item) => item.name));
                        addChunkPagesList.forEach((v, k) => {
                            if (k === id) {
                                source = addRequireToSource(id, modules, v.map(v => ({ name: v })));
                            }
                        });
                        return source;
                    }
                }
            });
        });
    }
}
exports.default = TaroLoadChunksPlugin;
function getIdOrName(chunk) {
    if (typeof chunk.id === 'string') {
        return chunk.id;
    }
    return chunk.name;
}
function addRequireToSource(id, modules, commonChunks) {
    const source = new webpack_sources_1.ConcatSource();
    commonChunks.forEach(chunkItem => {
        source.add(`require(${JSON.stringify(runner_utils_1.promoteRelativePath(path.relative(id, chunkItem.name)))});\n`);
    });
    source.add('\n');
    source.add(modules);
    source.add(';');
    return source;
}
