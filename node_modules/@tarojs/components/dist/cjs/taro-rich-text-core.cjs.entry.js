'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('./core-288f35a6.js');

const RichText = class {
    constructor(hostRef) {
        core.registerInstance(this, hostRef);
        this.renderNode = (node) => {
            if ('type' in node && node.type === 'text') {
                // unsupport Html Entries
                const content = (node.text || '').replace(/&nbsp;/g, '\u00A0');
                return content;
            }
            else if ('name' in node && node.name) {
                const { name, attrs, children } = node;
                const attributes = {};
                let childList = [];
                if (attrs && typeof attrs === 'object') {
                    for (const key in attrs) {
                        if (key === 'style' && typeof attrs[key] === 'string') {
                            // stencil JSX style props only support object
                            console.warn('[taro] attrs:style should be Object!');
                            continue;
                        }
                        attributes[key] = attrs[key];
                    }
                }
                if (children && children.length) {
                    childList = children.map(node => this.renderNode(node));
                }
                // @ts-ignore
                return core.h(name, attributes, childList);
            }
            return null;
        };
    }
    render() {
        const { nodes, renderNode } = this;
        if (Array.isArray(nodes)) {
            return (core.h(core.Host, null, nodes.map(node => renderNode(node))));
        }
        else {
            return core.h(core.Host, { innerHTML: nodes });
        }
    }
};

exports.taro_rich_text_core = RichText;
