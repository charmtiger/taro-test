var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h, H as Host, g as getElement } from './core-42efd82a.js';
import { f as formatTime } from './utils-22e850ae.js';
var VideoControl = /** @class */ (function () {
    function class_1(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.visible = false;
        this.isDraggingProgressBall = false;
        this.percentage = 0;
        this.progressDimentions = {
            left: 0,
            width: 0
        };
        this.calcPercentage = function (pageX) {
            var pos = pageX - _this.progressDimentions.left;
            pos = Math.max(pos, 0);
            pos = Math.min(pos, _this.progressDimentions.width);
            return pos / _this.progressDimentions.width;
        };
        this.onDragProgressBallStart = function () {
            _this.isDraggingProgressBall = true;
            _this.hideControlsTimer && clearTimeout(_this.hideControlsTimer);
        };
        this.onClickProgress = function (e) {
            e.stopPropagation();
            var percentage = _this.calcPercentage(e.pageX);
            _this.seekFunc(percentage * _this.duration);
            _this.toggleVisibility(true);
        };
    }
    class_1.prototype.onDocumentTouchMove = function (e) {
        if (!this.isDraggingProgressBall)
            return;
        var touchX = e.touches[0].pageX;
        this.percentage = this.calcPercentage(touchX);
        this.setProgressBall(this.percentage);
        this.setCurrentTime(this.percentage * this.duration);
    };
    class_1.prototype.onDocumentTouchEnd = function () {
        if (!this.isDraggingProgressBall)
            return;
        this.isDraggingProgressBall = false;
        this.seekFunc(this.percentage * this.duration);
        this.toggleVisibility(true);
    };
    class_1.prototype.setProgressBall = function (percentage) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.progressBallRef) {
                    this.progressBallRef.style.left = percentage * 100 + "%";
                }
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.toggleVisibility = function (nextVisible) {
        return __awaiter(this, void 0, void 0, function () {
            var visible;
            var _this = this;
            return __generator(this, function (_a) {
                visible = nextVisible === undefined ? !this.visible : nextVisible;
                if (visible) {
                    this.hideControlsTimer && clearTimeout(this.hideControlsTimer);
                    if (this.isPlaying) {
                        this.hideControlsTimer = setTimeout(function () {
                            _this.toggleVisibility(false);
                        }, 2000);
                    }
                    this.controlsRef.style.visibility = 'visible';
                }
                else {
                    this.controlsRef.style.visibility = 'hidden';
                }
                this.visible = !!visible;
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.getIsDraggingProgressBall = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.isDraggingProgressBall];
            });
        });
    };
    class_1.prototype.setCurrentTime = function (time) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.currentTimeRef.innerHTML = formatTime(time);
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.render = function () {
        var _this = this;
        var _a = this, controls = _a.controls, currentTime = _a.currentTime, duration = _a.duration, isPlaying = _a.isPlaying, pauseFunc = _a.pauseFunc, playFunc = _a.playFunc, showPlayBtn = _a.showPlayBtn, showProgress = _a.showProgress;
        var formattedDuration = formatTime(duration);
        var playBtn;
        if (!showPlayBtn) {
            playBtn = null;
        }
        else if (isPlaying) {
            playBtn = h("div", { class: 'taro-video-control-button taro-video-control-button-pause', onClick: pauseFunc });
        }
        else {
            playBtn = h("div", { class: 'taro-video-control-button taro-video-control-button-play', onClick: playFunc });
        }
        return (h(Host, { class: 'taro-video-bar taro-video-bar-full' }, controls && (h("div", { class: 'taro-video-controls' }, playBtn, showProgress && (h("div", { class: 'taro-video-current-time', ref: function (dom) { return (_this.currentTimeRef = dom); } }, formatTime(currentTime))), showProgress && (h("div", { class: 'taro-video-progress-container', onClick: this.onClickProgress }, h("div", { class: 'taro-video-progress', ref: function (ref) {
                if (!ref)
                    return;
                var rect = ref.getBoundingClientRect();
                _this.progressDimentions.left = rect.left;
                _this.progressDimentions.width = rect.width;
            } }, h("div", { class: 'taro-video-progress-buffered', style: { width: '100%' } }), h("div", { class: 'taro-video-ball', ref: function (dom) { return (_this.progressBallRef = dom); }, onTouchStart: this.onDragProgressBallStart, style: {
                left: (formattedDuration ? (this.currentTime / duration) * 100 : 0) + "%"
            } }, h("div", { class: 'taro-video-inner' }))))), showProgress && h("div", { class: 'taro-video-duration' }, formattedDuration))), h("slot", null)));
    };
    Object.defineProperty(class_1.prototype, "controlsRef", {
        get: function () { return getElement(this); },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
var VideoDanmu = /** @class */ (function () {
    function class_2(hostRef) {
        registerInstance(this, hostRef);
        this.list = [];
        this.danmuElList = [];
        this.currentTime = 0;
        this.enable = false;
        this.danmuList = [];
    }
    class_2.prototype.ensureProperties = function (danmu) {
        var clonedDanmu = Object.assign({}, danmu);
        if (!('time' in danmu)) {
            clonedDanmu.time = this.currentTime;
        }
        clonedDanmu.key = Math.random();
        clonedDanmu.bottom = Math.random() * 90 + 5 + "%";
        return clonedDanmu;
    };
    class_2.prototype.sendDanmu = function (danmuList) {
        if (danmuList === void 0) { danmuList = []; }
        return __awaiter(this, void 0, void 0, function () {
            var danmu;
            var _this = this;
            return __generator(this, function (_a) {
                if (Array.isArray(danmuList)) {
                    this.list = __spreadArrays(this.list, danmuList.map(function (danmu) { return _this.ensureProperties(danmu); }));
                }
                else {
                    danmu = danmuList;
                    this.list = __spreadArrays(this.list, [
                        Object.assign({}, this.ensureProperties(danmu))
                    ]);
                }
                return [2 /*return*/];
            });
        });
    };
    class_2.prototype.tick = function (currentTime) {
        return __awaiter(this, void 0, void 0, function () {
            var danmuList, newDanmuList, shouldUpdate, oldDanmuList;
            return __generator(this, function (_a) {
                this.currentTime = currentTime;
                if (!this.enable)
                    return [2 /*return*/];
                danmuList = this.list;
                newDanmuList = danmuList.filter(function (_a) {
                    var time = _a.time;
                    return currentTime - time < 4 && currentTime > time;
                });
                shouldUpdate = false;
                oldDanmuList = this.danmuList;
                if (newDanmuList.length !== oldDanmuList.length) {
                    shouldUpdate = true;
                }
                else {
                    shouldUpdate = newDanmuList.some(function (_a) {
                        var key = _a.key;
                        return oldDanmuList.every(function (danmu) {
                            return key !== danmu.key;
                        });
                    });
                }
                if (shouldUpdate) {
                    this.danmuList = newDanmuList;
                }
                return [2 /*return*/];
            });
        });
    };
    class_2.prototype.componentDidUpdate = function () {
        var _this = this;
        requestAnimationFrame(function () {
            setTimeout(function () {
                var danmuElList = _this.danmuElList.splice(0);
                danmuElList.forEach(function (danmu) {
                    danmu.style.left = '0';
                    danmu.style.webkitTransform = 'translateX(-100%)';
                    danmu.style.transform = 'translateX(-100%)';
                });
            });
        });
    };
    class_2.prototype.render = function () {
        var _this = this;
        if (!this.enable)
            return '';
        return (h(Host, { class: 'taro-video-danmu' }, this.danmuList.map(function (_a) {
            var text = _a.text, color = _a.color, bottom = _a.bottom, key = _a.key;
            return (h("p", { class: 'taro-video-danmu-item', key: key, style: {
                    color: color,
                    bottom: bottom
                }, ref: function (ref) {
                    if (ref) {
                        _this.danmuElList.push(ref);
                    }
                } }, text));
        })));
    };
    return class_2;
}());
export { VideoControl as taro_video_control, VideoDanmu as taro_video_danmu };
