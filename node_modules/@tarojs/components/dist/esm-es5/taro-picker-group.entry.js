import { r as registerInstance, h, H as Host } from './core-42efd82a.js';
import { L as LINE_HEIGHT, T as TOP, M as MASK_HEIGHT } from './constant-12ea7a5a.js';
var TaroPickerGroup = /** @class */ (function () {
    function TaroPickerGroup(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.range = [];
        this.onTouchStart = function (e) {
            // 记录第一次的点击位置
            _this.startY = e.changedTouches[0].clientY;
            _this.preY = e.changedTouches[0].clientY;
            _this.hadMove = false;
        };
        this.onTouchMove = function (e) {
            e.preventDefault();
            var y = e.changedTouches[0].clientY;
            var deltaY = y - _this.preY;
            _this.preY = y;
            _this.touchEnd = false;
            if (Math.abs(y - _this.startY) > 10)
                _this.hadMove = true;
            var newPos = _this.height + deltaY;
            // 处理时间选择器的无限滚动
            if (_this.mode === 'time') {
                if (_this.columnId === '0') {
                    // 数字 28 来自于 4 格补帧 + 0 ～ 23 的 24 格，共 28 格
                    if (newPos > TOP - LINE_HEIGHT * 3) {
                        newPos = TOP - LINE_HEIGHT * 27 + deltaY;
                    }
                    if (newPos < TOP - LINE_HEIGHT * 28) {
                        newPos = TOP - LINE_HEIGHT * 4 + deltaY;
                    }
                }
                else if (_this.columnId === '1') {
                    if (newPos > TOP - LINE_HEIGHT * 3) {
                        newPos = TOP - LINE_HEIGHT * 63 + deltaY;
                    }
                    if (newPos < TOP - LINE_HEIGHT * 64) {
                        newPos = TOP - LINE_HEIGHT * 4 + deltaY;
                    }
                }
            }
            _this.updateHeight(newPos, _this.columnId);
        };
        this.onTouchEnd = function (e) {
            var _a = _this, mode = _a.mode, range = _a.range, height = _a.height, updateHeight = _a.updateHeight, onColumnChange = _a.onColumnChange, columnId = _a.columnId;
            var max = 0;
            var min = -LINE_HEIGHT * (range.length - 1);
            var endY = e.changedTouches[0].clientY;
            _this.touchEnd = true;
            // touchEnd 时的高度，可能带小数点，需要再处理
            var absoluteHeight;
            if (!_this.hadMove) {
                /** 点击 */
                // 屏幕高度
                var windowHeight = window.innerHeight;
                // picker__mask 垂直方向距离屏幕顶部的高度
                var relativeY = windowHeight - MASK_HEIGHT / 2;
                absoluteHeight = height - TOP - (endY - relativeY);
                // 处理时间选择器的无限滚动
                if (mode === 'time') {
                    if (columnId === '0') {
                        // 点击上溢出
                        // absoluteHeight 是相对模块中点来算的，所以会算多半行，这时要减去这半行，即2.5行
                        if (absoluteHeight > -LINE_HEIGHT * 2.5) {
                            return _this.formulaUnlimitedScroll(24, absoluteHeight, 'up');
                        }
                        // 点击下溢出
                        if (absoluteHeight < -LINE_HEIGHT * 28.5) {
                            return _this.formulaUnlimitedScroll(24, absoluteHeight, 'down');
                        }
                    }
                    else if (columnId === '1') {
                        // 点击上溢出
                        if (absoluteHeight > -LINE_HEIGHT * 2.5) {
                            return _this.formulaUnlimitedScroll(60, absoluteHeight, 'up');
                        }
                        // 点击下溢出
                        if (absoluteHeight < -LINE_HEIGHT * 64.5) {
                            return _this.formulaUnlimitedScroll(60, absoluteHeight, 'down');
                        }
                    }
                }
            }
            else {
                /** 滚动 */
                absoluteHeight = height - TOP;
            }
            // 边界情况处理
            if (absoluteHeight > max)
                absoluteHeight = 0;
            if (absoluteHeight < min)
                absoluteHeight = min;
            // 先按公式算出 index, 再用此 index 算出一个整数高度
            var index = Math.round(absoluteHeight / -LINE_HEIGHT);
            var relativeHeight = TOP - LINE_HEIGHT * index;
            if (_this.mode === 'date') {
                if (_this.columnId === '0') {
                    _this.updateDay(+_this.range[index].replace(/[^0-9]/gi, ''), 0);
                }
                if (_this.columnId === '1') {
                    _this.updateDay(+_this.range[index].replace(/[^0-9]/gi, ''), 1);
                }
                if (_this.columnId === '2') {
                    _this.updateDay(+_this.range[index].replace(/[^0-9]/gi, ''), 2);
                }
            }
            updateHeight(relativeHeight, columnId, mode === 'time');
            onColumnChange && onColumnChange(relativeHeight, columnId);
        };
    }
    TaroPickerGroup.prototype.getPosition = function () {
        var transition = this.touchEnd ? 0.3 : 0;
        var transformValue = "translate3d(0, " + this.height + "px, 0)";
        var transitionValue = "transform " + transition + "s";
        return {
            transform: transformValue,
            '-webkit-transform': transformValue,
            transition: transitionValue,
            '-webkit-transition': transitionValue
        };
    };
    TaroPickerGroup.prototype.formulaUnlimitedScroll = function (range, absoluteHeight, direction) {
        var _this = this;
        var _a = this, height = _a.height, updateHeight = _a.updateHeight, columnId = _a.columnId;
        var factor = direction === 'up' ? 1 : -1;
        this.touchEnd = false;
        // 点击超过范围，点击到补帧时，先跳到另一端的补帧
        updateHeight(-range * factor * LINE_HEIGHT + height, columnId);
        // 再做过渡动画
        requestAnimationFrame(function () {
            _this.touchEnd = true;
            var index = Math.round(absoluteHeight / -LINE_HEIGHT) + range * factor;
            var relativeHeight = TOP - LINE_HEIGHT * index;
            updateHeight(relativeHeight, columnId, true);
        });
    };
    TaroPickerGroup.prototype.render = function () {
        var _a = this, range = _a.range, rangeKey = _a.rangeKey;
        var pickerItem = range.map(function (item) {
            var content = rangeKey ? item[rangeKey] : item;
            return (h("div", { class: 'weui-picker__item' }, content));
        });
        return (h(Host, { class: 'weui-picker__group', onTouchStart: this.onTouchStart, onTouchMove: this.onTouchMove, onTouchEnd: this.onTouchEnd }, h("div", { class: 'weui-picker__mask' }), h("div", { class: 'weui-picker__indicator' }), h("div", { class: 'weui-picker__content', style: this.getPosition() }, pickerItem)));
    };
    return TaroPickerGroup;
}());
export { TaroPickerGroup as taro_picker_group };
