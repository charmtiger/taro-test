"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loader_utils_1 = require("loader-utils");
const path_1 = require("path");
function genResource(path, pages, { context }) {
    return `
  Object.assign({
      path: '${path}',
      load: () => {
          return import('${path_1.join(context, path)}')
      }
  }, ${JSON.stringify(pages[path])} || {}),
`;
}
function default_1() {
    var _a;
    const options = loader_utils_1.getOptions(this);
    const config = options.config;
    const pages = options.pages;
    let tabBarCode = `const tabbarIconPath = []
const tabbarSelectedIconPath = []
`;
    if (config.tabBar) {
        const tabbarList = config.tabBar.list;
        for (let i = 0; i < tabbarList.length; i++) {
            const t = tabbarList[i];
            if (t.iconPath) {
                tabBarCode += `tabbarIconPath[${i}] = require('${path_1.join(path_1.dirname(this.resourcePath), t.iconPath)}').default\n`;
            }
            if (t.selectedIconPath) {
                tabBarCode += `tabbarSelectedIconPath[${i}] = require('${path_1.join(path_1.dirname(this.resourcePath), t.selectedIconPath)}').default\n`;
            }
        }
    }
    const webComponents = `applyPolyfills().then(() => {
  defineCustomElements(window)
})
`;
    const vue = `
import '@tarojs/components/h5/vue'
`;
    const code = `import Taro from '@tarojs/taro'
import component from '${path_1.join(path_1.dirname(this.resourcePath), options.filename)}'
import { defineCustomElements, applyPolyfills } from '@tarojs/components/loader'
import '@tarojs/components/dist/taro-components/taro-components.css'
${options.framework === 'vue' ? vue : ''}
${webComponents}
const config = ${JSON.stringify(config)}
${config.tabBar ? tabBarCode : ''}
if (config.tabBar) {
  const tabbarList = config.tabBar.list
  for (let i = 0; i < tabbarList.length; i++) {
    const t = tabbarList[i]
    if (t.iconPath) {
      t.iconPath = tabbarIconPath[i]
    }
    if (t.selectedIconPath) {
      t.selectedIconPath = tabbarSelectedIconPath[i]
    }
  }
}
config.routes = [
  ${(_a = config.pages) === null || _a === void 0 ? void 0 : _a.map(path => genResource(path, pages, this)).join('')}
]
Taro.createRouter(component, config, '${options.framework}')
`;
    return code;
}
exports.default = default_1;
//# sourceMappingURL=h5.js.map